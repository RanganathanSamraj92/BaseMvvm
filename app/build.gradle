apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "kotlin-kapt"

android {
    compileSdkVersion Integer.parseInt(app_targetSdkVersion)
    defaultConfig {
        applicationId applicationID
        minSdkVersion Integer.parseInt(app_minSdkVersion)
        targetSdkVersion Integer.parseInt(app_targetSdkVersion)
        versionCode Integer.parseInt(app_versionCode)
        versionName app_versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        dev {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SERVER_BASE_URL", "\"${base_url}\""
        }



        live {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors {
        production {
            dimension "version"
            applicationId applicationID
            versionCode Integer.parseInt(app_versionCode)
            versionName app_versionName
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher"
            ]
            resValue "string", "app_name", "${AppName}"
            //signingConfig signingConfigs.debug
        }
        demo {
            dimension "version"
            applicationId applicationID
            versionCode Integer.parseInt(app_versionCode)
            versionName app_versionName
            manifestPlaceholders = [
                    appIcon: "@mipmap/ic_launcher_round"
            ]
            resValue "string", "app_name", "${AppNameDemo}"
            signingConfig signingConfigs.debug
        }
    }
    signingConfigs {
        debug {
            //storeFile file("debug.keystore")
        }
        myConfig {
            storeFile file("other.keystore")
            storePassword "android"
            keyAlias "androidotherkey"
            keyPassword "android"
        }
    }


}
/*
kapt {
    generateStubs = true
}*/

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation "junit:junit:$test_junit_version"
    androidTestImplementation "androidx.test:runner:$runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"

    /*kotlin*/
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    /*androidx*/
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    /*databinding*/
    kapt "androidx.databinding:databinding-compiler:$databinding_version"
    /*viewModel*/
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_version"
    /*coroutines*/
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    /*retrofit*/
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$moshi_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofit_adapter_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_gson_version"
    //Okhttp3
    implementation "com.squareup.okhttp3:logging-interceptor:$retrofit_interceptor_version"
    /*Picasso*/
    implementation "com.squareup.picasso:picasso:$picasso_version"
    /*circleImageview*/
    implementation "de.hdodenhof:circleimageview:$circle_imageview_version"

    /*palette*/
    implementation "androidx.palette:palette:$palette_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"

    /*caligraphy*/
    implementation "uk.co.chrisjenx:calligraphy:$caligraphy_version"
    /*materialEditext*/
    implementation "com.rengwuxian.materialedittext:library:$material_edittext_version"
    /*sdp*/
    implementation "com.intuit.sdp:sdp-android:$sdp_version"

}
